//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using CapstoneModelLib.GeneratedCode;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class Order
{
	public virtual List<OrderItem> placedOrder
	{
		get;
		set;
	}

	public virtual int customerID
	{
		get;
		set;
	}

	public virtual int shopperID
	{
		get;
		set;
	}

	public virtual Address deliveryAddress
	{
		get;
		set;
	}

	public virtual Address storeAddress
	{
		get;
		set;
	}

    private List<OrderItem> foundItems
    {
        get;
        set;
    } = new List<OrderItem>();

    private List<OrderItem> missingItems
    {
        get;
        set;
    } = new List<OrderItem>();

	public virtual double EstimatedCost
	{
		get;
		set;
	}

	public virtual int orderID
	{
		get;
		set;
	}

	public virtual bool notifyCustomer
	{
		get;
		set;
	}

	public virtual void FoundItem(OrderItem item)
	{
        /*
         *Make sure to add the acutal price to the item or that it has the acutal price attached already 
         * 
         */
        foundItems.Add(item);
	}

	public virtual void MoveItemToMissing(OrderItem item)
	{
        missingItems.Add(item);
	}

	public virtual void FoundMissingItem(OrderItem item)
	{
        missingItems.Remove(item);
        foundItems.Add(item);
	}

	public virtual void GetToStore()
	{
		//throw new System.NotImplementedException();
        //figure out how to get android location within this method
	}

	public virtual void DeliverOrder()
	{
		//throw new System.NotImplementedException();
        //Again a google maps function and figure out location within the library
	}

	public virtual Double EstimateCost()
	{
        double EstimatedCost = 0;
		//throw new System.NotImplementedException();
        foreach(OrderItem i in placedOrder)
        {
            EstimatedCost += i.maxPrice;
        }
        return EstimatedCost;
	}

}

