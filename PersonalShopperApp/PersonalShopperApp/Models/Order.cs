//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Java.IO;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using Xamarin.Forms.Maps;

namespace PersonalShopperApp.Models
{
    public class Order: ISerializable
    {
        public Order()
        {
            placedOrder = new List<OrderItem>();
        }

        public string _id { get; set; } = DateTime.Now.ToString();

        public List<OrderItem> placedOrder
        {
            get;
            private set;
        }

        public int rating { get; set; }

        public virtual int customerID
        {
            get;
            set;
        }

        public virtual int shopperID
        {
            get;
            set;
        }

        public virtual Address deliveryAddress
        {
            get;
            set;
        }

        public virtual Address storeAddress
        {
            get;
            set;
        }

        private List<OrderItem> foundItems
        {
            get;
            set;
        } = new List<OrderItem>();

        private List<OrderItem> missingItems
        {
            get;
            set;
        } = new List<OrderItem>();

        public virtual int orderID
        {
            get;
            set;
        }

        public virtual bool notifyCustomer
        {
            get;
            set;
        }

        public IntPtr Handle => throw new NotImplementedException();

        public virtual bool FoundItem(OrderItem item)
        {
            bool itemFound = false;
            if (item.actualPrice != 0.0)
            {
                foundItems.Add(item);
                itemFound = true;
            }
            return itemFound;
        }

        public virtual void MoveItemToMissing(OrderItem item)
        {
            missingItems.Add(item);
        }

        public virtual void FoundMissingItem(OrderItem item)
        {
            missingItems.Remove(item);
            foundItems.Add(item);
        }

        public virtual async System.Threading.Tasks.Task<Position> GetStorePositionAsync()
        {
            Geocoder geo = new Geocoder();
            var possiblePositions = await geo.GetPositionsForAddressAsync(storeAddress.GeocoderString());
            Position averageStoreLocation;
            double lat = 0, longi = 0;
            foreach(Position p in possiblePositions)
            {
                lat += p.Latitude;
                longi += p.Longitude;
            }
            lat = lat / possiblePositions.Count();
            longi = longi / possiblePositions.Count();
            averageStoreLocation = new Position(lat, longi);
            return averageStoreLocation;
        }

        public virtual async System.Threading.Tasks.Task<Position> GetDeliveryPositionAsync()
        {
            Geocoder geo = new Geocoder();
            var possiblePositions = await geo.GetPositionsForAddressAsync(deliveryAddress.GeocoderString());
            Position averageDelvLocation;
            double lat = 0, longi = 0;
            foreach (Position p in possiblePositions)
            {
                lat += p.Latitude;
                longi += p.Longitude;
            }
            lat = lat / possiblePositions.Count();
            longi = longi / possiblePositions.Count();
            averageDelvLocation = new Position(lat, longi);
            return averageDelvLocation;
        }

        public virtual Double EstimateCost()
        {
            double EstimatedCost = 0;
            //throw new System.NotImplementedException();
            foreach (OrderItem i in placedOrder)
            {
                EstimatedCost += i.maxPrice;
            }
            return EstimatedCost;
        }

        public Double CalculateActualCost()
        {
            double actualTotal = 0;
            foreach (OrderItem item in foundItems)
            {
                actualTotal += item.actualPrice;
            }
            return actualTotal;
        }

        public void Dispose()
        {
            throw new NotImplementedException();
        }
    }
}
